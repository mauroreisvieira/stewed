@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($group-root) {
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;

  @include theme.define-var(
    (
      border-radius: theme.get-var(radius)
    )
  );

  &:where(&--gap-none) {
    :not(:first-child) {
      margin-left: -1px;
      border-radius: 0;
    }

    :not(:first-child, :last-child) {
      position: relative;
      z-index: 1;
    }

    :first-child {
      border-radius: 0;
      border-top-left-radius: theme.get-var(border-radius);
      border-bottom-left-radius: theme.get-var(border-radius);
    }

    :last-child {
      border-top-right-radius: theme.get-var(border-radius);
      border-bottom-right-radius: theme.get-var(border-radius);
    }
  }

  & > :where([aria-selected="true"], [aria-checked="true"]) {
    position: relative;
    z-index: 2;
  }

  & > :where([aria-selected], [aria-checked]):not([aria-disabled="true"]) {
    cursor: pointer;
  }

  [aria-disabled="true"] {
    @include theme.disabled-styles;
  }

  &--row {
    flex-direction: row;
  }

  &--column {
    flex-direction: column;
  }

  &--full-width {
    width: 100%;
  }

  &--wrap {
    flex-wrap: wrap;
  }

  // Gap
  @each $key, $value in $group-gap {
    &--gap-#{$key} {
      @include theme.define-var(
        (
          gap: $value
        )
      );
    }
  }
}
