@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($button-root) {
  all: unset;
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  flex-shrink: 0;
  gap: calc(theme.get-var(padding-inline) / 2);
  align-items: center;
  justify-content: center;
  min-width: theme.get-var(size);
  height: theme.get-var(size);
  padding-inline: calc(theme.get-var(padding-inline));
  overflow: hidden;
  color: theme.get-var(color);
  text-overflow: ellipsis;
  text-transform: inherit;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-color: theme.get-var(background-color);
  border: theme.get-var(border-width) solid theme.get-var(border-color);
  border-radius: theme.get-var(radius);

  @include theme.define-var(
    (
      border-width: 1px,
      border-color: transparent
    )
  );

  @include theme.focus-styles;

  &--disabled {
    @include theme.disabled-styles;
  }

  &[href] {
    text-decoration: none;
  }

  &--loading {
    pointer-events: none;

    .#{$button-root} {
      &__spinner {
        position: absolute;
      }

      &__left,
      &__right,
      &__text {
        visibility: hidden;
      }
    }
  }

  @each $value in $button-skins {
    &--#{$value} {
      &-filled {
        @include theme.define-var(
          (
            background-color: theme.get-color($value, "background"),
            color: theme.get-color($value, "foreground-on-background")
          )
        );

        &:hover:not([aria-disabled="true"], [aria-pressed="true"]) {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "background-hovered")
            )
          );
        }

        &.#{$button-root}--pressed,
        &:active:not([aria-disabled="true"]) {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "background-pressed")
            )
          );
        }
      }

      &-ghost {
        @include theme.define-var(
          (
            color: theme.get-color($value, "foreground"),
            background-color: transparent
          )
        );

        &:hover:not([aria-disabled="true"], [aria-pressed="true"]) {
          @include theme.define-var(
            (
              background-color: color-mix(
                  in srgb,
                  theme.get-color($value, "background"),
                  theme.get-color("background-default") 95%
                )
            )
          );
        }

        &.#{$button-root}--pressed,
        &:active:not([aria-disabled="true"]) {
          @include theme.define-var(
            (
              background-color: color-mix(
                  in srgb,
                  theme.get-color($value, "background"),
                  theme.get-color("background-default") 90%
                )
            )
          );
        }
      }

      &-outline {
        @include theme.define-var(
          (
            background-color: transparent,
            border-color: currentColor,
            color: theme.get-color($value, "border")
          )
        );

        &:hover:not([aria-disabled="true"], [aria-pressed="true"]) {
          @include theme.define-var(
            (
              color: theme.get-color($value, "border-hovered")
            )
          );
        }

        &.#{$button-root}--pressed,
        &:active:not([aria-disabled="true"]) {
          @include theme.define-var(
            (
              color: theme.get-color($value, "background-pressed")
            )
          );
        }
      }

      &-soft {
        @include theme.define-var(
          (
            color: theme.get-color($value, "foreground"),
            background-color: color-mix(
                in srgb,
                theme.get-color($value, "background"),
                transparent 95%
              )
          )
        );

        &:hover:not([aria-disabled="true"], [aria-pressed="true"]) {
          @include theme.define-var(
            (
              background-color: color-mix(
                  in srgb,
                  theme.get-color($value, "background"),
                  transparent 90%
                )
            )
          );
        }

        &.#{$button-root}--pressed,
        &:active:not([aria-disabled="true"]) {
          @include theme.define-var(
            (
              background-color: color-mix(
                  in srgb,
                  theme.get-color($value, "background"),
                  transparent 85%
                )
            )
          );
        }
      }
    }
  }

  &__text {
    @include text.typography(
      base,
      $overrides: (
        color: currentColor,
        font-size: theme.get-var(text-font-size),
        line-height: theme.get-var(text-line-height)
      )
    );
  }

  &__spinner,
  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--icon-only {
    gap: 0;
    width: theme.get-var(size);
    height: theme.get-var(size);

    .#{$button-root} {
      &__text {
        @include theme.define-var(
          (
            text-font-size: 0
          )
        );
      }
    }
  }

  &--xs {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "xs"),
        padding-inline: theme.get-spacing("xs"),
        text-line-height: theme.get-line-height("xs"),
        text-font-size: theme.get-font-size("xxs")
      )
    );
  }

  &--sm {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "sm"),
        padding-inline: theme.get-spacing("md"),
        text-line-height: theme.get-line-height("sm"),
        text-font-size: theme.get-font-size("xs")
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "md"),
        padding-inline: theme.get-spacing("lg"),
        text-line-height: theme.get-line-height("sm"),
        text-font-size: theme.get-font-size("sm")
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "lg"),
        padding-inline: theme.get-spacing("xl"),
        text-line-height: theme.get-line-height("md"),
        text-font-size: theme.get-font-size("md")
      )
    );
  }

  &--xl {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "xl"),
        padding-inline: theme.get-spacing("2xl"),
        text-line-height: theme.get-line-height("md"),
        text-font-size: theme.get-font-size("lg")
      )
    );
  }

  &--full-width {
    flex-shrink: 1;
    width: 100%;
  }
}
